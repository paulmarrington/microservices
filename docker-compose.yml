# volumes_from is used to access volumes from another
# container - but it is also used to control the
# start order

# OS Stack
# Updated instance of base operating system for development
ubuntu:
  container_name: ram_ubuntu
  build:          dockerfiles
  dockerfile:     ubuntu
  command:        /bin/bash

node:
  container_name: ram_node
  build:          dockerfiles
  dockerfile:     node
  volumes:        [".:/ram"]
  working_dir:    /ram/microservices
  volumes_from:   ["ubuntu"]

nginx:
  container_name: ram_nginx
  build:          dockerfiles
  dockerfile:     nginx
  volumes:        [".:/ram"]
  working_dir:    /ram/frontend
  volumes_from:   ["node"]
  ports:          ["80:80"]

#vnc: # Base OS with xterm and other useful X11 utilities
#  container_name: ram_vnc
#  build:          dockerfiles
#  dockerfile:     vnc
#  volumes:        [".:/ram","/tmp/.X11-unix:/tmp/.X11-unix:ro"]
#  volumes_from:   ["node"]
#  environment:    {"DISPLAY":"192.168.99.1:0.0"}
#  ports:          ["5500:5500", "5900:5900"]
#  command:        /bin/bash #s it will not keep running
#  command:        tail -f /dev/null

#x11: # Base OS with xterm and other useful X11 utilities
#  # for Windows, install XMING from http://sourceforge.net/projects/xming/
#  # change entrypoint to tail -f /dev/null to keep running
#  container_name: ram_x11
#  build:          dockerfiles
#  dockerfile:     x11
#  volumes:        [".:/ram","/tmp/.X11-unix:/tmp/.X11-unix:ro"]
#  environment:    {"DISPLAY":"192.168.99.1:1.0"}
#  volumes_from:   ["node"]
#  ports:          ["6001:6001"]
#  command:        /bin/bash #s it will not keep running

#vscode: # Base OS with xterm and other useful X11 utilities
#  # for Windows, install XMING from http://sourceforge.net/projects/xming/
#  # change entrypoint to tail -f /dev/null to keep running
#  container_name: ram_vscode
#  build:          dockerfiles
#  dockerfile:     vscode
#  volumes:        [".:/ram","/tmp/.X11-unix:/tmp/.X11-unix:ro"]
#  environment:    {"DISPLAY":"192.168.99.1:2.0"}
#  volumes_from:   ["node"]
#  ports:          ["6002:6002"]

# Data-only container. Database is in /data/db.
mongo_data:
  container_name: ram_mongo_data
  image:          busybox
  volumes:        [".:/ram", "/data/db"]
  volumes_from:   ["node"]

# Updated instance of a mongo database container
# We may need to rebuild this ourselves if a different OS image
# is needed.
mongo:
  container_name: ram_mongo
  build:          dockerfiles
  dockerfile:     mongo
  restart:        always
  volumes:        [".:/ram"]
  volumes_from:   ["mongo_data"]

jasmine:
  container_name: ram_jasmine
  build:          dockerfiles
  dockerfile:     jasmine
  links:         ["mongo", "microservice_register"]
  volumes:        [".:/ram"]
  volumes_from:   ["node"]
#
#webstorm:
#  container_name: ram_webstorm
#  build:          dockerfiles
#  dockerfile:     webstorm
#  command:        tail -f /dev/null
#  working_dir:    /ram/microservices
#  links:         ["mongo", "microservice_register"]
#  volumes:        [".:/ram"]
#  volumes_from:   ["node", "vnc"]
#  ports:          ["5900:5900"]

microservice_register:
  container_name: ram_microservice_register
  build:          microservices/register
  restart:        always
  links:         ["mongo"]
  # shares /var/run with host so it can talk to docker manager
  volumes:        [".:/ram","/var/run:/var/run"]
  working_dir:    /ram/microservices/register
  volumes_from:   ["node"]
  ports:          ["8081:80"]
  # Items below are for development/debugging
  # --debug allows remote debugging, --debug-brk will wait
  # at start of execution for debugger to connect.
  environment:    {node_switches: --debug, service_name: register}
  # Change the first port to that needed for debugging
  ports:          ["5859:5858"]

## Microservice template - copy to make your own service
microservice_template:
  container_name: ram_microservice_template
  build:          microservices/template
  working_dir:    /ram/microservices/template
  restart:        always
  links:         ["mongo", "microservice_register"]
  volumes:        [".:/ram"]
  volumes_from:   ["node"]
  # Items below are for development/debugging
  # --debug allows remote debugging, --debug-brk will wait
  # at start of execution for debugger to connect.
  environment:    {node_switches: --debug, service_name: template}
  # Change the first port to that needed for debugging
  ports:          ["5860:5858"]
